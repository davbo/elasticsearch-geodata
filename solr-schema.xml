<?xml version="1.0" encoding="UTF-8" ?>

<schema name="mobileoxford-places" version="1.5">

    <fields>
        <!-- Fields below are mandatory for every document -->

        <!-- e.g. ID: osm:1938450 TODO: be able to search by part of ID? like naptan code-->
        <field name="id" type="string" indexed="true" stored="true" required="true" multiValued="true" />

        <!-- e.g. "Oxford University Computing Services" -->
        <field name="name" type="text_en_splitting" indexed="true" stored="true" required="true" />

        <!-- location - can't be multiValued atm, see fieldType -->
        <field name="location" type="location" indexed="true" stored="true" required="true" multiValued="false" />

        <!-- all other fields are stored as string atm -->
        <dynamicField name="raw_*" type="string" indexed="false" stored="true" />
    </fields>

    <uniqueKey>id</uniqueKey>

    <types>

        <!-- Simple type that doesn't do any analyze, perfect for IDs... -->
        <fieldType name="string" class="solr.StrField" sortMissingLast="true" />

        <fieldType name="location" class="solr.LatLonType" subFieldSuffix="_coordinate" />

        <!-- A text field with defaults appropriate for English: it
            tokenizes with StandardTokenizer, removes English stop words
            (lang/stopwords_en.txt), down cases, protects words from protwords.txt, and
            finally applies Porter's stemming.  The query time analyzer
            also applies synonyms from synonyms.txt. -->
        <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <!-- in this example, we will only use synonyms at query time
                <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
                -->
                <!-- Case insensitive stop word removal.
                add enablePositionIncrements=true in both the index and query
                analyzers to leave a 'gap' for more accurate phrase queries.
                -->
                <filter class="solr.StopFilterFactory"
                    ignoreCase="true"
                    words="lang/stopwords_en.txt"
                    enablePositionIncrements="true"
                />
                <filter class="solr.LowerCaseFilterFactory"/>
	            <filter class="solr.EnglishPossessiveFilterFactory"/>
                <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
	            <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
                <filter class="solr.EnglishMinimalStemFilterFactory"/>
	            -->
                <filter class="solr.PorterStemFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
                <filter class="solr.StopFilterFactory"
                     ignoreCase="true"
                     words="lang/stopwords_en.txt"
                     enablePositionIncrements="true"
                     />
                <filter class="solr.LowerCaseFilterFactory"/>
	            <filter class="solr.EnglishPossessiveFilterFactory"/>
                <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
	            <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
                <filter class="solr.EnglishMinimalStemFilterFactory"/>
	            -->
                <filter class="solr.PorterStemFilterFactory"/>
            </analyzer>
        </fieldType>

            <!-- A text field with defaults appropriate for English, plus
        	 aggressive word-splitting and autophrase features enabled.
        	 This field is just like text_en, except it adds
        	 WordDelimiterFilter to enable splitting and matching of
        	 words on case-change, alpha numeric boundaries, and
        	 non-alphanumeric chars.  This means certain compound word
        	 cases will work, for example query "wi fi" will match
        	 document "WiFi" or "wi-fi".
                -->
            <fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
              <analyzer type="index">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <!-- in this example, we will only use synonyms at query time
                <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
                -->
                <!-- Case insensitive stop word removal.
                  add enablePositionIncrements=true in both the index and query
                  analyzers to leave a 'gap' for more accurate phrase queries.
                -->
                <filter class="solr.StopFilterFactory"
                        ignoreCase="true"
                        words="lang/stopwords_en.txt"
                        enablePositionIncrements="true"
                        />
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
                <filter class="solr.PorterStemFilterFactory"/>
              </analyzer>
              <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
                <filter class="solr.StopFilterFactory"
                        ignoreCase="true"
                        words="lang/stopwords_en.txt"
                        enablePositionIncrements="true"
                        />
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
                <filter class="solr.PorterStemFilterFactory"/>
              </analyzer>
            </fieldType>

    </types>

</schema>
